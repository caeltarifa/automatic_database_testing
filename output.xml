<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 4.1.3 (Python 3.8.10 on linux)" generated="20220305 01:46:53.263" rpa="false" schemaversion="2">
<suite id="s1" name="Dbtesting" source="/root/first_tests/automatic_database_testing/dbtesting.robot">
<kw name="Connect To Database" library="DatabaseLibrary" type="SETUP">
<arg>psycopg2</arg>
<arg>${DBname}</arg>
<arg>${DBuser}</arg>
<arg>${DBpass}</arg>
<arg>${DBhost}</arg>
<arg>${DBport}</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using `dbName`, `dbUsername`, and `dbPassword`.</doc>
<msg timestamp="20220305 01:46:53.374" level="INFO">Connecting using : psycopg2.connect(database=db_robot, user=postgres, password=1234, host=172.17.0.2, port=5432) </msg>
<status status="PASS" starttime="20220305 01:46:53.347" endtime="20220305 01:46:53.387"/>
</kw>
<test id="s1-t1" name="Create person table">
<kw name="Execute Sql String" library="DatabaseLibrary">
<var>${output}</var>
<arg>Create table if not exists person( id integer, first_name varchar(20), last_name varchar(20) );</arg>
<doc>Executes the sqlString as SQL commands. Useful to pass arguments to your sql. Set optional input `sansTran` to
True to run command without an explicit transaction commit or rollback.</doc>
<msg timestamp="20220305 01:46:53.389" level="INFO">Executing : Execute SQL String  |  Create table if not exists person( id integer, first_name varchar(20), last_name varchar(20) ); </msg>
<msg timestamp="20220305 01:46:53.391" level="INFO">${output} = None</msg>
<status status="PASS" starttime="20220305 01:46:53.388" endtime="20220305 01:46:53.391"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20220305 01:46:53.391" endtime="20220305 01:46:53.393"/>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>${output}</arg>
<arg>None</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<msg timestamp="20220305 01:46:53.394" level="INFO">Argument types are:
&lt;class 'NoneType'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20220305 01:46:53.393" endtime="20220305 01:46:53.394"/>
</kw>
<status status="PASS" starttime="20220305 01:46:53.387" endtime="20220305 01:46:53.395"/>
</test>
<test id="s1-t2" name="Inserting Data in person Table">
<kw name="Execute Sql String" library="DatabaseLibrary">
<var>${output}</var>
<arg>Insert into person (id, first_name, last_name) values(100,'cael','tarifa');</arg>
<doc>Executes the sqlString as SQL commands. Useful to pass arguments to your sql. Set optional input `sansTran` to
True to run command without an explicit transaction commit or rollback.</doc>
<msg timestamp="20220305 01:46:53.408" level="INFO">Executing : Execute SQL String  |  Insert into person (id, first_name, last_name) values(100,'cael','tarifa'); </msg>
<msg timestamp="20220305 01:46:53.416" level="INFO">${output} = None</msg>
<status status="PASS" starttime="20220305 01:46:53.407" endtime="20220305 01:46:53.416"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20220305 01:46:53.416" endtime="20220305 01:46:53.418"/>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>${output}</arg>
<arg>None</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<msg timestamp="20220305 01:46:53.419" level="INFO">Argument types are:
&lt;class 'NoneType'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20220305 01:46:53.419" endtime="20220305 01:46:53.420"/>
</kw>
<status status="PASS" starttime="20220305 01:46:53.405" endtime="20220305 01:46:53.422"/>
</test>
<test id="s1-t3" name="Inserting Data in person Table">
<kw name="Execute Sql Script" library="DatabaseLibrary">
<var>${output}</var>
<arg>./sql_script.sql</arg>
<doc>Executes the content of the `sqlScriptFileName` as SQL commands. Useful for setting the database to a known
state before running your tests, or clearing out your test data after running each a test. Set optional input
`sansTran` to True to run command without an explicit transaction commit or rollback.</doc>
<msg timestamp="20220305 01:46:53.430" level="INFO">Executing : Execute SQL Script  |  ./sql_script.sql </msg>
<msg timestamp="20220305 01:46:53.446" level="INFO">${output} = None</msg>
<status status="PASS" starttime="20220305 01:46:53.430" endtime="20220305 01:46:53.446"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20220305 01:46:53.447" endtime="20220305 01:46:53.448"/>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>${output}</arg>
<arg>None</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<msg timestamp="20220305 01:46:53.450" level="INFO">Argument types are:
&lt;class 'NoneType'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20220305 01:46:53.449" endtime="20220305 01:46:53.450"/>
</kw>
<status status="PASS" starttime="20220305 01:46:53.428" endtime="20220305 01:46:53.451"/>
</test>
<test id="s1-t4" name="Check cael record present in Person Table">
<kw name="Check If Exists In Database" library="DatabaseLibrary">
<arg>select id from person where first_name='cael';</arg>
<doc>Check if any row would be returned by given the input `selectStatement`. If there are no results, then this will
throw an AssertionError. Set optional input `sansTran` to True to run command without an explicit transaction
commit or rollback.</doc>
<msg timestamp="20220305 01:46:53.455" level="INFO">Executing : Check If Exists In Database  |  select id from person where first_name='cael'; </msg>
<msg timestamp="20220305 01:46:53.456" level="INFO">Executing : Query  |  select id from person where first_name='cael'; </msg>
<status status="PASS" starttime="20220305 01:46:53.454" endtime="20220305 01:46:53.459"/>
</kw>
<status status="PASS" starttime="20220305 01:46:53.452" endtime="20220305 01:46:53.460"/>
</test>
<test id="s1-t5" name="Check cael_not recor Not present in Person Table">
<kw name="Check If Not Exists In Database" library="DatabaseLibrary">
<arg>select id from person where first_name='cael_not';</arg>
<doc>This is the negation of `check_if_exists_in_database`.</doc>
<msg timestamp="20220305 01:46:53.465" level="INFO">Executing : Check If Not Exists In Database  |  select id from person where first_name='cael_not'; </msg>
<msg timestamp="20220305 01:46:53.466" level="INFO">Executing : Query  |  select id from person where first_name='cael_not'; </msg>
<status status="PASS" starttime="20220305 01:46:53.464" endtime="20220305 01:46:53.467"/>
</kw>
<status status="PASS" starttime="20220305 01:46:53.463" endtime="20220305 01:46:53.467"/>
</test>
<test id="s1-t6" name="Check Person Table exists in mydb database">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>person</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20220305 01:46:53.470" level="INFO">Executing : Table Must Exist  |  person </msg>
<msg timestamp="20220305 01:46:53.470" level="INFO">Executing : Row Count  |  SELECT * FROM information_schema.tables WHERE table_name='person' </msg>
<status status="PASS" starttime="20220305 01:46:53.470" endtime="20220305 01:46:53.476"/>
</kw>
<status status="PASS" starttime="20220305 01:46:53.468" endtime="20220305 01:46:53.477"/>
</test>
<test id="s1-t7" name="Verify Row Count is Zero">
<kw name="Row Count Is 0" library="DatabaseLibrary">
<arg>select * from person where first_name = 'xyz';</arg>
<doc>Check if any rows are returned from the submitted `selectStatement`. If there are, then this will throw an
AssertionError. Set optional input `sansTran` to True to run command without an explicit transaction commit or
rollback.</doc>
<msg timestamp="20220305 01:46:53.481" level="INFO">Executing : Row Count Is 0  |  select * from person where first_name = 'xyz'; </msg>
<msg timestamp="20220305 01:46:53.481" level="INFO">Executing : Row Count  |  select * from person where first_name = 'xyz'; </msg>
<status status="PASS" starttime="20220305 01:46:53.480" endtime="20220305 01:46:53.484"/>
</kw>
<status status="PASS" starttime="20220305 01:46:53.478" endtime="20220305 01:46:53.486"/>
</test>
<test id="s1-t8" name="Verify Row Count is Equal to Some Value">
<kw name="Row Count Is Equal To X" library="DatabaseLibrary">
<arg>select * from person where id=100;</arg>
<arg>1</arg>
<doc>Check if the number of rows returned from `selectStatement` is equal to the value submitted. If not, then this
will throw an AssertionError. Set optional input `sansTran` to True to run command without an explicit
transaction commit or rollback.</doc>
<msg timestamp="20220305 01:46:53.489" level="INFO">Executing : Row Count Is Equal To X  |  select * from person where id=100;  |  1 </msg>
<msg timestamp="20220305 01:46:53.490" level="INFO">Executing : Row Count  |  select * from person where id=100; </msg>
<status status="PASS" starttime="20220305 01:46:53.489" endtime="20220305 01:46:53.492"/>
</kw>
<status status="PASS" starttime="20220305 01:46:53.487" endtime="20220305 01:46:53.492"/>
</test>
<test id="s1-t9" name="Verify Row Count is Greater than Some Value">
<kw name="Row Count Is Greater Than X" library="DatabaseLibrary">
<arg>select * from person where first_name='cael';</arg>
<arg>0</arg>
<doc>Check if the number of rows returned from `selectStatement` is greater than the value submitted. If not, then
this will throw an AssertionError. Set optional input `sansTran` to True to run command without an explicit
transaction commit or rollback.</doc>
<msg timestamp="20220305 01:46:53.499" level="INFO">Executing : Row Count Is Greater Than X  |  select * from person where first_name='cael';  |  0 </msg>
<msg timestamp="20220305 01:46:53.499" level="INFO">Executing : Row Count  |  select * from person where first_name='cael'; </msg>
<status status="PASS" starttime="20220305 01:46:53.499" endtime="20220305 01:46:53.501"/>
</kw>
<status status="PASS" starttime="20220305 01:46:53.494" endtime="20220305 01:46:53.502"/>
</test>
<test id="s1-t10" name="Verify Row Count is Less than Some Value">
<kw name="Row Count Is Less Than X" library="DatabaseLibrary">
<arg>select * from person where first_name='cael';</arg>
<arg>5</arg>
<doc>Check if the number of rows returned from `selectStatement` is less than the value submitted. If not, then this
will throw an AssertionError. Set optional input `sansTran` to True to run command without an explicit
transaction commit or rollback.</doc>
<msg timestamp="20220305 01:46:53.508" level="INFO">Executing : Row Count Is Less Than X  |  select * from person where first_name='cael';  |  5 </msg>
<msg timestamp="20220305 01:46:53.508" level="INFO">Executing : Row Count  |  select * from person where first_name='cael'; </msg>
<status status="PASS" starttime="20220305 01:46:53.508" endtime="20220305 01:46:53.510"/>
</kw>
<status status="PASS" starttime="20220305 01:46:53.506" endtime="20220305 01:46:53.511"/>
</test>
<test id="s1-t11" name="Update record in person table">
<kw name="Execute Sql String" library="DatabaseLibrary">
<var>${output}</var>
<arg>Update person set first_name='leac' where id=100;</arg>
<doc>Executes the sqlString as SQL commands. Useful to pass arguments to your sql. Set optional input `sansTran` to
True to run command without an explicit transaction commit or rollback.</doc>
<msg timestamp="20220305 01:46:53.517" level="INFO">Executing : Execute SQL String  |  Update person set first_name='leac' where id=100; </msg>
<msg timestamp="20220305 01:46:53.524" level="INFO">${output} = None</msg>
<status status="PASS" starttime="20220305 01:46:53.517" endtime="20220305 01:46:53.524"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20220305 01:46:53.525" endtime="20220305 01:46:53.527"/>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>${output}</arg>
<arg>None</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<msg timestamp="20220305 01:46:53.528" level="INFO">Argument types are:
&lt;class 'NoneType'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20220305 01:46:53.527" endtime="20220305 01:46:53.528"/>
</kw>
<status status="PASS" starttime="20220305 01:46:53.513" endtime="20220305 01:46:53.529"/>
</test>
<test id="s1-t12" name="Retrieve Records from Person Table">
<kw name="Query" library="DatabaseLibrary">
<var>@{queryResults}</var>
<arg>select * from person;</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20220305 01:46:53.534" level="INFO">Executing : Query  |  select * from person; </msg>
<msg timestamp="20220305 01:46:53.536" level="INFO">@{queryResults} = [ (101, 'cael1', 'tarifa1') | (102, 'cael2', 'tarifa2') | (103, 'cael3', 'tarifa3') | (104, 'cael4', 'tarifa4') | (105, 'cael5', 'tarifa5') | (106, 'cael6', 'tarifa6') | (100, 'leac', 'tarifa') ]</msg>
<status status="PASS" starttime="20220305 01:46:53.533" endtime="20220305 01:46:53.536"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>many @{queryResults}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20220305 01:46:53.537" endtime="20220305 01:46:53.538"/>
</kw>
<status status="PASS" starttime="20220305 01:46:53.530" endtime="20220305 01:46:53.539"/>
</test>
<test id="s1-t13" name="Delete Records from person table">
<kw name="Execute Sql String" library="DatabaseLibrary">
<var>${output}</var>
<arg>Delete from person;</arg>
<doc>Executes the sqlString as SQL commands. Useful to pass arguments to your sql. Set optional input `sansTran` to
True to run command without an explicit transaction commit or rollback.</doc>
<msg timestamp="20220305 01:46:53.544" level="INFO">Executing : Execute SQL String  |  Delete from person; </msg>
<msg timestamp="20220305 01:46:53.550" level="INFO">${output} = None</msg>
<status status="PASS" starttime="20220305 01:46:53.543" endtime="20220305 01:46:53.550"/>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>${output}</arg>
<arg>None</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<msg timestamp="20220305 01:46:53.552" level="INFO">Argument types are:
&lt;class 'NoneType'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20220305 01:46:53.550" endtime="20220305 01:46:53.552"/>
</kw>
<status status="PASS" starttime="20220305 01:46:53.542" endtime="20220305 01:46:53.553"/>
</test>
<kw name="Disconnect From Database" library="DatabaseLibrary" type="TEARDOWN">
<doc>Disconnects from the database.</doc>
<msg timestamp="20220305 01:46:53.556" level="INFO">Executing : Disconnect From Database</msg>
<status status="PASS" starttime="20220305 01:46:53.556" endtime="20220305 01:46:53.557"/>
</kw>
<status status="PASS" starttime="20220305 01:46:53.265" endtime="20220305 01:46:53.557"/>
</suite>
<statistics>
<total>
<stat pass="13" fail="0" skip="0">All Tests</stat>
</total>
<tag>
</tag>
<suite>
<stat pass="13" fail="0" skip="0" id="s1" name="Dbtesting">Dbtesting</stat>
</suite>
</statistics>
<errors>
<msg timestamp="20220305 01:46:53.427" level="WARN">Multiple test cases with name 'Inserting Data in person Table' executed in test suite 'Dbtesting'.</msg>
</errors>
</robot>
